// ~/composables/useAnimatedLink.ts
import { ref, onMounted, onUnmounted } from "vue";
import { useRoute, useRouter } from "nuxt3";
// const router = useRouter();
// const route = useRoute();
export default function useAnimatedLink() {
    // A ref to store the link element
    const link = ref<HTMLElement | null>(null);
    // A ref to store the animation duration
    const duration = ref<number>(1000);
    // Get the route and router instances
    const route = useRoute();
    const router = useRouter();

    // A function to handle the click event
    const handleClick = (event: Event) => {
        // Prevent default navigation behavior
        event.preventDefault();
        // Get the target page from the link's href attribute
        const targetPage = link.value?.href;
        // Add a transitionend event listener to the link
        link.value?.addEventListener("transitionend", () => {
            // Navigate to the target page when the animation ends
            if (targetPage) router.push(targetPage);
        });
    };

    // A function to add the click event listener
    const addClickListener = () => {
        link.value?.addEventListener("click", handleClick);
    };

    // A function to remove the click event listener
    const removeClickListener = () => {
        link.value?.removeEventListener("click", handleClick);
    };

    // Add the click event listener when the component is mounted
    onMounted(addClickListener);

    // Remove the click event listener when the component is unmounted
    onUnmounted(removeClickListener);

    // Return the link ref, the duration ref, and the handleClick function
    return { link, duration, handleClick };
}
function useRoute() {
    throw new Error("Function not implemented.");
}

